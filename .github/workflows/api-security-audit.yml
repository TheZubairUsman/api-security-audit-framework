name: API Security Audit Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target API URL to audit'
        required: true
        default: 'https://api.example.com'
      scan_type:
        description: 'Type of scan to perform'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - basic
        - comprehensive
        - postman-only
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - development

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  validate-framework:
    name: Validate Framework Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        # Install Newman for Postman collection testing
        npm install -g newman newman-reporter-html
        
        # Install Python dependencies
        pip install flask requests jsonschema pyyaml
    
    - name: Validate shell scripts
      run: |
        # Install shellcheck
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
        # Check all shell scripts
        find tools/scripts -name "*.sh" -exec shellcheck {} \;
    
    - name: Validate Postman collections
      run: |
        # Validate Postman collection JSON
        newman validate tools/postman-collections/collections_security_tests.json
    
    - name: Validate Python examples
      run: |
        # Syntax check for Python files
        find examples -name "*.py" -exec python -m py_compile {} \;
    
    - name: Check documentation links
      run: |
        # Install markdown link checker
        npm install -g markdown-link-check
        
        # Check all markdown files
        find . -name "*.md" -exec markdown-link-check {} \;

  security-scan-basic:
    name: Basic Security Scan
    runs-on: ubuntu-latest
    needs: validate-framework
    if: github.event.inputs.scan_type == 'basic' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq openssl bc
    
    - name: Run basic security scan
      env:
        TARGET_URL: ${{ github.event.inputs.target_url || 'https://httpbin.org' }}
        API_TOKEN: ${{ secrets.API_TOKEN }}
        ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
      run: |
        cd tools/scripts
        chmod +x basic-scan.sh
        
        # Run basic scan with output capture
        ./basic-scan.sh "$TARGET_URL" 2>&1 | tee ../../basic-scan-results.txt
    
    - name: Upload basic scan results
      uses: actions/upload-artifact@v3
      with:
        name: basic-scan-results
        path: basic-scan-results.txt
        retention-days: 30
    
    - name: Parse scan results
      id: parse_results
      run: |
        # Extract key metrics from scan results
        if [ -f basic-scan-results.txt ]; then
          CRITICAL_COUNT=$(grep -c "CRITICAL" basic-scan-results.txt || echo "0")
          HIGH_COUNT=$(grep -c "HIGH" basic-scan-results.txt || echo "0")
          MEDIUM_COUNT=$(grep -c "MEDIUM" basic-scan-results.txt || echo "0")
          
          echo "critical_issues=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_issues=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "medium_issues=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
        fi
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const critical = '${{ steps.parse_results.outputs.critical_issues }}';
          const high = '${{ steps.parse_results.outputs.high_issues }}';
          const medium = '${{ steps.parse_results.outputs.medium_issues }}';
          
          const comment = `## 🔒 Basic Security Scan Results
          
          | Severity | Count |
          |----------|-------|
          | Critical | ${critical} |
          | High     | ${high} |
          | Medium   | ${medium} |
          
          📄 Full results available in the [artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  postman-security-tests:
    name: Postman Security Tests
    runs-on: ubuntu-latest
    needs: validate-framework
    if: github.event.inputs.scan_type == 'postman-only' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Newman
      run: |
        npm install -g newman newman-reporter-html newman-reporter-json
    
    - name: Prepare environment file
      env:
        TARGET_URL: ${{ github.event.inputs.target_url || 'https://httpbin.org' }}
        API_TOKEN: ${{ secrets.API_TOKEN }}
        ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        API_KEY: ${{ secrets.API_KEY }}
      run: |
        # Update environment file with secrets
        cd tools/postman
        
        # Create dynamic environment file
        cat > environment-ci.json << EOF
        {
          "id": "ci-environment",
          "name": "CI Environment",
          "values": [
            {
              "key": "baseUrl",
              "value": "$TARGET_URL",
              "enabled": true
            },
            {
              "key": "authToken",
              "value": "$API_TOKEN",
              "enabled": true
            },
            {
              "key": "adminToken",
              "value": "$ADMIN_TOKEN",
              "enabled": true
            },
            {
              "key": "apiKey",
              "value": "$API_KEY",
              "enabled": true
            }
          ]
        }
        EOF
    
    - name: Run Postman security tests
      run: |
        cd tools/scripts
        chmod +x run-newman.sh
        
        # Run Newman tests with CI environment
        ./run-newman.sh ../postman-collections/collections_security_tests.json ../postman/environment-ci.json
    
    - name: Upload Postman results
      uses: actions/upload-artifact@v3
      with:
        name: postman-test-results
        path: |
          newman-results.json
          newman-report.html
        retention-days: 30
    
    - name: Parse Postman results
      id: parse_postman
      run: |
        if [ -f newman-results.json ]; then
          TOTAL_TESTS=$(jq '.run.stats.tests.total' newman-results.json)
          FAILED_TESTS=$(jq '.run.stats.tests.failed' newman-results.json)
          PASSED_TESTS=$(jq '.run.stats.tests.passed' newman-results.json)
          
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
        fi

  comprehensive-scan:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest
    needs: [security-scan-basic, postman-security-tests]
    if: github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq openssl bc wkhtmltopdf
        npm install -g newman newman-reporter-html
    
    - name: Download previous results
      uses: actions/download-artifact@v3
      with:
        name: basic-scan-results
    
    - name: Download Postman results
      uses: actions/download-artifact@v3
      with:
        name: postman-test-results
    
    - name: Run comprehensive scan
      env:
        TARGET_URL: ${{ github.event.inputs.target_url || 'https://httpbin.org' }}
        API_TOKEN: ${{ secrets.API_TOKEN }}
        ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
      run: |
        cd tools/scripts
        chmod +x comprehensive-scan.sh
        
        # Run comprehensive scan
        ./comprehensive-scan.sh "$TARGET_URL" --format all --output ../../comprehensive-results
    
    - name: Generate security report
      run: |
        # Create comprehensive security report
        cat > security-report.md << EOF
        # 🔒 API Security Audit Report
        
        **Target:** ${{ github.event.inputs.target_url || 'https://httpbin.org' }}
        **Environment:** ${{ github.event.inputs.environment || 'staging' }}
        **Date:** $(date)
        **Commit:** ${{ github.sha }}
        
        ## Summary
        
        This automated security audit was performed using the API Security Audit Framework.
        
        ## Scan Results
        
        ### Basic Security Scan
        - **Critical Issues:** ${{ steps.parse_results.outputs.critical_issues || 'N/A' }}
        - **High Issues:** ${{ steps.parse_results.outputs.high_issues || 'N/A' }}
        - **Medium Issues:** ${{ steps.parse_results.outputs.medium_issues || 'N/A' }}
        
        ### Postman Security Tests
        - **Total Tests:** ${{ steps.parse_postman.outputs.total_tests || 'N/A' }}
        - **Passed:** ${{ steps.parse_postman.outputs.passed_tests || 'N/A' }}
        - **Failed:** ${{ steps.parse_postman.outputs.failed_tests || 'N/A' }}
        
        ## Recommendations
        
        1. Review all critical and high severity issues immediately
        2. Implement proper authentication and authorization controls
        3. Ensure input validation on all endpoints
        4. Review and update security headers
        5. Implement rate limiting and monitoring
        
        ## Files Generated
        
        - Basic scan results: \`basic-scan-results.txt\`
        - Postman test results: \`newman-results.json\`, \`newman-report.html\`
        - Comprehensive results: \`comprehensive-results.*\`
        
        ---
        *Generated by API Security Audit Framework v1.0*
        EOF
    
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-security-audit
        path: |
          security-report.md
          comprehensive-results.*
        retention-days: 90
    
    - name: Security gate check
      run: |
        # Fail the build if critical issues are found
        CRITICAL_COUNT=${{ steps.parse_results.outputs.critical_issues || 0 }}
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Security gate failed: $CRITICAL_COUNT critical issues found"
          exit 1
        fi
        
        HIGH_COUNT=${{ steps.parse_results.outputs.high_issues || 0 }}
        if [ "$HIGH_COUNT" -gt 5 ]; then
          echo "⚠️  Security gate warning: $HIGH_COUNT high issues found (threshold: 5)"
          exit 1
        fi
        
        echo "✅ Security gate passed"

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: comprehensive-scan
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "🚨 API Security Audit Failed",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*API Security Audit Failed* 🚨\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Workflow:* ${{ github.workflow }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                }
              }
            ]
          }' \
          $SLACK_WEBHOOK_URL
    
    - name: Create security issue
      if: github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          const title = `🔒 Scheduled Security Audit Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Security Audit Failure
          
          The scheduled security audit has failed. Please review the results and take appropriate action.
          
          **Details:**
          - **Workflow Run:** [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
          - **Commit:** ${context.sha}
          - **Date:** ${new Date().toISOString()}
          
          **Next Steps:**
          1. Review the audit results in the workflow artifacts
          2. Address any critical or high severity issues
          3. Re-run the audit to verify fixes
          4. Update security documentation if needed
          
          /cc @security-team`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'audit', 'high-priority']
          });

  deploy-results:
    name: Deploy Results to GitHub Pages
    runs-on: ubuntu-latest
    needs: comprehensive-scan
    if: github.ref == 'refs/heads/main' && success()
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download audit results
      uses: actions/download-artifact@v3
      with:
        name: comprehensive-security-audit
        path: ./audit-results
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Build Pages site
      run: |
        mkdir -p _site
        
        # Create index page
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>API Security Audit Results</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
                .header { border-bottom: 1px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }
                .results { display: grid; gap: 20px; }
                .card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; }
                .critical { border-left: 4px solid #dc3545; }
                .high { border-left: 4px solid #fd7e14; }
                .medium { border-left: 4px solid #ffc107; }
                .low { border-left: 4px solid #28a745; }
                .timestamp { color: #666; font-size: 0.9em; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>🔒 API Security Audit Results</h1>
                <p class="timestamp">Last updated: $(date)</p>
            </div>
            <div class="results">
                <div class="card">
                    <h2>Latest Audit Report</h2>
                    <p>View the complete security audit results and recommendations.</p>
                    <a href="./audit-results/security-report.md">📄 Security Report</a>
                </div>
                <div class="card">
                    <h2>Postman Test Results</h2>
                    <p>Detailed API security test results from Postman collections.</p>
                    <a href="./audit-results/newman-report.html">📊 Test Report</a>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Copy audit results
        cp -r audit-results _site/
    
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./_site
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

    - name: 42Crunch REST API Static Security Testing
  # You may pin to the exact commit or the version.
  # uses: 42Crunch/api-security-audit-action@5c859ccd8c90dd4601acc694b5da6374e2c7a3c2
  uses: 42Crunch/api-security-audit-action@v4
  with:
    # The API token to access 42Crunch Platform. Follow hese steps to configure API_TOKEN https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm
    api-token: # optional
    # Minimum score for OpenAPI files.
    min-score: # optional, default is 75
    # 42Crunch platform URL
    platform-url: # optional, default is https://us.42crunch.cloud
    # Log level, one of: FATAL, ERROR, WARN, INFO, DEBUG
    log-level: # optional, default is INFO
    # Share new API collections with everyone, one of: OFF, READ_ONLY, READ_WRITE
    share-everyone: # optional, default is OFF
    # GitHub token for uploading results to Github Code Scanning
    github-token: # optional, default is ${{ github.token }}
    # Upload results to Github Code Scanning
    upload-to-code-scanning: # optional, default is false
    # If set to 'true', disables all local failure conditions (like minimum score) and fails execution only if the criteria defined in SQGs are not met.
    ignore-failures: # optional, default is false
    # Set the root directory for the plugin
    root-directory: # optional
    # Change the default collection name
    default-collection-name: # optional
    # Writes Audit report in JSON format to a specified file
    json-report: # optional
    # List of tags to be set on the newly created APIs. Format "category1:name1 category2:name2", optional.
    api-tags: # optional
    # If set to 'true', forces to complete execution successfully even if a network error has occurred (such as a failure to connect to 4unch Platform, etc).
    ignore-network-errors: # optional, default is false
    # If set to 'true', forces to complete execution successfully even if the failures conditions (like min-score or SQG criteria) you have set are met.
    skip-local-checks: # optional, default is false
    # Writes SARIF report to a specified file
    sarif-report: # optional, default is 
    # Set the maximum timeout (in seconds) for the audit report. Fail if the result isn't ready within that interval.
    audit-timeout: # optional
          
